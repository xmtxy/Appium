{"name": "输入的内容和标题为空-新增笔记，请求参数:{'title': '标题_03', 'content': 'xx'}", "status": "broken", "statusDetails": {"message": "BaseException: 报错信息：", "trace": "self = <common.send_appium.SendAppium object at 0x0000018339019AB0>\ntestName = '输入的内容和标题为空-新增笔记', moduleName = '新增模块', assert_str = '标题_02'\ndata = {'content': 'xx', 'title': '标题_03'}\n\n    def all_send_appium(self, testName, moduleName, assert_str, data=None):\n        self.driver.implicitly_wait(10)\n        # 将接口发起前的信息记录到日志中\n        self.logger.info('----------------appium UI自动化测试开始----------------')\n        self.logger.info(f\"用例的名称是：{testName}\")\n        self.logger.info(f\"用例的所属模块是：{moduleName}\")\n        self.logger.info(f'用例的Data是：{data}')\n    \n        try:\n            for i in range(self.caselen()):\n                # 1.处理点击\n                if self.get_operate_type(i) == 'click':\n                    if self.get_findtype(i) == 'text':\n                        self.baseoperate.get_name(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'id':\n                        self.baseoperate.get_id(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'index':\n                        # 处理第二次新增有道云笔记的无法获取元素的情况\n                        if self.element_index(i) != '1' and self.get_elementinfo(i) == 'com.youdao.note:id/btn_cancel':\n                            pass\n                        else:\n                            self.baseoperate.get_id(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'xpath':\n                        self.baseoperate.get_xpath(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'ids':\n                        self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].click()\n    \n                # 2.处理键盘输入\n                elif self.get_operate_type(i) == 'send_keys':\n                    if self.get_findtype(i) == 'text':\n                        self.baseoperate.get_name(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'id':\n                        self.baseoperate.get_id(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'xpath':\n                        self.baseoperate.get_xpath(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'ids':\n                        self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].send_keys(\n                            self.get_send_content(i))\n    \n                # 3.处理手机的返回按键\n                elif self.get_operate_type(i) == 'back':\n                    for n in range(self.get_backtimes(i)):\n                        self.baseoperate.back()\n    \n                # 4.处理手机的向上滑动\n                elif self.get_operate_type(i) == 'swipe_up':\n                    for n in range(self.get_backtimes(i)):\n                        self.baseoperate.swipe_up()\n    \n                # 5.处理用例完成后的响应信息\n                elif self.get_operate_type(i) == 'text':\n                    if self.get_findtype(i) == 'text':\n                        Response_Text = self.baseoperate.get_name(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'id':\n                        Response_Text = self.baseoperate.get_id(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'xpath':\n                        Response_Text = self.baseoperate.get_xpath(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'ids':\n                        Response_Text = self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].text\n    \n            self.logger.info(f\"用例的响应信息是：{Response_Text}\")\n            self.logger.info(f\"用例的断言信息是：{assert_str}\")\n            # 断言:\n>           self.assert_result(self.test_yaml['validate'], Response_Text)  # 调用下面的方法处理\n\ncommon\\send_appium.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.send_appium.SendAppium object at 0x0000018339019AB0>\ndy_result = [{'contains': '标题_02'}], return_json = '标题_03'\n\n    def assert_result(self, dy_result, return_json):\n        # print(f\"dy_result:{dy_result}\")  # [{'contains': 'xxx'}]\n        # print(f\"return_json:{return_json}\")\n        # print(type(return_code))  # int 整型\n        all_flag = 0\n        for dy in dy_result:\n            for key, value in dy.items():\n                if key == 'contains':\n                    flag = self.contains_assert(value, return_json)  # 调用包含断言\n                    all_flag = all_flag + flag\n                else:\n                    print(\"框架暂不支持此段断言方式\")\n>       assert all_flag == 0  # True表示断言通过\nE       AssertionError\n\ncommon\\send_appium.py:197: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.Youdao_Cloud.test_youdao_01.TestUI object at 0x0000018338FCFB80>\nAddNotes = {'data': {'content': 'xx', 'title': '标题_03'}, 'parameterize': {'id-name-module-title-content-assert_str-describe': '/d...: '3', 'Module': '新增模块', 'Name': '输入的内容和标题为空-新增笔记', 'step': '步骤一:点击新增按钮/步骤二:点击新增笔记/步骤三:输入空内容/步骤四:输入空标题/步骤五:点击完成'}, ...}\n\n    @pytest.mark.parametrize(\"AddNotes\", read_testcase(\"Youdao_Cloud\\\\test_youdao_03.yaml\"))\n    def test_youdao_01(self, AddNotes):\n>       SendAppium(AddNotes).standard_yaml()\n\ntest_case\\Youdao_Cloud\\test_youdao_01.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\send_appium.py:110: in standard_yaml\n    self.all_send_appium(testName, moduleName, assert_str, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.send_appium.SendAppium object at 0x0000018339019AB0>\ntestName = '输入的内容和标题为空-新增笔记', moduleName = '新增模块', assert_str = '标题_02'\ndata = {'content': 'xx', 'title': '标题_03'}\n\n    def all_send_appium(self, testName, moduleName, assert_str, data=None):\n        self.driver.implicitly_wait(10)\n        # 将接口发起前的信息记录到日志中\n        self.logger.info('----------------appium UI自动化测试开始----------------')\n        self.logger.info(f\"用例的名称是：{testName}\")\n        self.logger.info(f\"用例的所属模块是：{moduleName}\")\n        self.logger.info(f'用例的Data是：{data}')\n    \n        try:\n            for i in range(self.caselen()):\n                # 1.处理点击\n                if self.get_operate_type(i) == 'click':\n                    if self.get_findtype(i) == 'text':\n                        self.baseoperate.get_name(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'id':\n                        self.baseoperate.get_id(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'index':\n                        # 处理第二次新增有道云笔记的无法获取元素的情况\n                        if self.element_index(i) != '1' and self.get_elementinfo(i) == 'com.youdao.note:id/btn_cancel':\n                            pass\n                        else:\n                            self.baseoperate.get_id(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'xpath':\n                        self.baseoperate.get_xpath(self.get_elementinfo(i)).click()\n                    elif self.get_findtype(i) == 'ids':\n                        self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].click()\n    \n                # 2.处理键盘输入\n                elif self.get_operate_type(i) == 'send_keys':\n                    if self.get_findtype(i) == 'text':\n                        self.baseoperate.get_name(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'id':\n                        self.baseoperate.get_id(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'xpath':\n                        self.baseoperate.get_xpath(self.get_elementinfo(i)).send_keys(self.get_send_content(i))\n                    elif self.get_findtype(i) == 'ids':\n                        self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].send_keys(\n                            self.get_send_content(i))\n    \n                # 3.处理手机的返回按键\n                elif self.get_operate_type(i) == 'back':\n                    for n in range(self.get_backtimes(i)):\n                        self.baseoperate.back()\n    \n                # 4.处理手机的向上滑动\n                elif self.get_operate_type(i) == 'swipe_up':\n                    for n in range(self.get_backtimes(i)):\n                        self.baseoperate.swipe_up()\n    \n                # 5.处理用例完成后的响应信息\n                elif self.get_operate_type(i) == 'text':\n                    if self.get_findtype(i) == 'text':\n                        Response_Text = self.baseoperate.get_name(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'id':\n                        Response_Text = self.baseoperate.get_id(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'xpath':\n                        Response_Text = self.baseoperate.get_xpath(self.get_elementinfo(i)).text\n                    elif self.get_findtype(i) == 'ids':\n                        Response_Text = self.baseoperate.get_ids(self.get_elementinfo(i))[self.get_index(i)].text\n    \n            self.logger.info(f\"用例的响应信息是：{Response_Text}\")\n            self.logger.info(f\"用例的断言信息是：{assert_str}\")\n            # 断言:\n            self.assert_result(self.test_yaml['validate'], Response_Text)  # 调用下面的方法处理\n            self.logger.info('----------------appium UI自动化测试结束----------------' + \"\\n\")\n        except BaseException as e:\n            self.logger.exception('appium 自动化测试报错！')\n>           raise BaseException(f'报错信息：{e}')\nE           BaseException: 报错信息：\n\ncommon\\send_appium.py:182: BaseException"}, "description": "有道云新增模块测试用例 执行人：小明同学", "steps": [{"name": "步骤一:点击新增按钮", "status": "passed", "start": 1687316937082, "stop": 1687316937082}, {"name": "步骤二:点击新增笔记", "status": "passed", "start": 1687316937082, "stop": 1687316937082}, {"name": "步骤三:输入空内容", "status": "passed", "start": 1687316937082, "stop": 1687316937082}, {"name": "步骤四:输入空标题", "status": "passed", "start": 1687316937082, "stop": 1687316937082}, {"name": "步骤五:点击完成", "status": "passed", "start": 1687316937082, "stop": 1687316937082}], "attachments": [{"name": "log", "source": "f295c94d-5871-4053-baa0-886368f873fa-attachment.txt", "type": "text/plain"}], "start": 1687316937082, "stop": 1687316943903, "uuid": "565a84f1-7274-4fb8-9dcb-fa49d044699a", "historyId": "cd7705f558f0578ce037e96727765e22", "testCaseId": "e0940b29b8c8b0d528d31cd70c2860a8", "fullName": "test_case.Youdao_Cloud.test_youdao_01.TestUI#test_youdao_01", "labels": [{"name": "feature", "value": "有道云新增模块"}, {"name": "suite", "value": "有道云新增模块测试用例"}, {"name": "subSuite", "value": "有道云新增模块测试用例执行情况"}, {"name": "parentSuite", "value": "有道云新增模块"}, {"name": "host", "value": "LAPTOP-ATH5SPIM"}, {"name": "thread", "value": "9424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.Youdao_Cloud.test_youdao_01"}]}